#include "Window.h"
#include "Object.h"
#include "HalfEdgep.h"
#include "GL/glu.h"
#include "Edge.h"
#include "Vertex.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>
#include <fstream>
using namespace glm;

vector<Face> faces;
 

void setup(int w, int h)
{
	vec3 max=returnMax();
	vec3 min=returnMin();
	vec3 center = (max + min) * 0.5f;
  	float radius = length (max - min) * 0.5f;
	glClearColor(0.0, 0.0, 0.0, 0.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
        glMatrixMode(GL_PROJECTION_MATRIX);
	
        glLoadIdentity();
      	gluPerspective(60,800/800*1.0f,0.1,100);

        glMatrixMode(GL_MODELVIEW_MATRIX);
	glTranslatef(0.0f,0.0f,-center.z-3);
  	
	float s=0.95f/radius;
	glScalef(s,s,s);
    
}

void drawObj()
{
	
	{
	}
}

void saveObj()
{
	//static vector<Face> faces=getFace();
	
	static vector<Vertex> vertex=getVertices();
	
	ofstream newObj("new.obj");
	if(!newObj)
	{
			cout<<"Test"<<" "<<"cannot open.\n";
			return;
	}
	newObj<<"#"<<"Test"<<endl;
	newObj<<"#Number of Vertices: "<<vertex.size()<<endl;
	newObj<<"#Number of Faces: "<<faces.size()<<endl;
	for(int i=0; i<vertex.size(); i++)
	{
			newObj<<"v "<<vertex[i].x<<" "<<vertex[i].y<<" "<<vertex[i].z<<endl;
	}
	newObj<<endl;
	//clearData();
	/*
	for(int i=0; i<faces.size(); i++)
	{
		Edge e=*faces[i].edge;
		Vertex v=*e.vert;
		Edge n=*e.next;
		Vertex v1=*n.vert;
		Edge n2=*n.next;
		Vertex v2=*n2.vert;
		newObj<<"f "<<v.loc<<" "<<v1.loc<<" "<<v2.loc<<endl;
	}*/
	newObj.close();
}
	

int main(int argc, char ** argv){
  	//Creating Window/*
	GLFWwindow* window=setupWindow();
		//Draws the Window
	int s=readFile(argc,argv);
	if(s==-1)
		return 1;
	loadHalfEdge();
	static vector<Face> f=getFace();
	//clearData();
	
	
	cout<<"Half Edge Loaded\n";
	saveObj();
	while (!glfwWindowShouldClose(window))
	{
	      
		GLint width, height;
	       	glfwGetWindowSize(window, &width, &height);
		glViewport(0, 0, width, height);
			
		setup(width, height);
		
	  	drawObj();	
			
		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	//Terminates the window     
	glfwDestroyWindow(window);
	glfwTerminate();
	exit(EXIT_SUCCESS);
}
